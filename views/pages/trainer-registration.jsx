const React = require("react");
const ejs = require("ejs");
const MainLayout = require("../layouts/MainLayout");
const fallbackData = require("../utils/fallbackData");

const template = "<div class=\"container my-5\">\n  <div class=\"row\">\n    <div class=\"col-lg-8 mx-auto\">\n      <div class=\"card bg-dark text-white\">\n        <div class=\"card-header bg-danger text-white text-center\">\n          <h2><i class=\"fas fa-chalkboard-teacher me-2\"></i>Register to Teach Courses</h2>\n        </div>\n        <div class=\"card-body\">\n          <p class=\"lead text-center mb-4\">Select courses you would like to teach. You will follow the course's fixed weekly schedule.</p>\n          \n          <% if (courses && courses.length > 0) { %>\n            <div class=\"row\">\n              <% courses.forEach(course => { \n                const isRegistered = registeredCourses && registeredCourses[course._id.toString()];\n              %>\n                <div class=\"col-md-12 mb-4\">\n                  <div class=\"card course-card bg-secondary text-white\">\n                    <div class=\"card-body\">\n                      <h4 class=\"card-title\"><%= course.name.charAt(0).toUpperCase() + course.name.slice(1) %></h4>\n                      <p><%= course.description %></p>\n                      \n                      <!-- Course Schedule -->\n                      <h5 class=\"mt-4 mb-3\">Weekly Schedule</h5>\n                      <div class=\"table-responsive\">\n                        <table class=\"table table-dark table-bordered\">\n                          <thead>\n                            <tr>\n                              <th>Day</th>\n                              <th>Time</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            <% if (course.schedule && course.schedule.length > 0) { \n                              // Sort schedule by day of the week\n                              const dayOrder = {\n                                monday: 1,\n                                tuesday: 2, \n                                wednesday: 3,\n                                thursday: 4,\n                                friday: 5,\n                                saturday: 6,\n                                sunday: 7\n                              };\n                              \n                              const sortedSchedule = [...course.schedule].sort((a, b) => {\n                                return dayOrder[a.day] - dayOrder[b.day];\n                              });\n                            %>\n                              <% sortedSchedule.forEach(session => { %>\n                                <tr>\n                                  <td><%= session.day.charAt(0).toUpperCase() + session.day.slice(1) %></td>\n                                  <td><%= session.startTime %> - <%= session.endTime %></td>\n                                </tr>\n                              <% }); %>\n                            <% } else { %>\n                              <tr>\n                                <td colspan=\"2\" class=\"text-center\">No schedule available</td>\n                              </tr>\n                            <% } %>\n                          </tbody>\n                        </table>\n                      </div>\n                      \n                      <!-- Registration Action -->\n                      <div class=\"mt-3 text-end\">\n                        <% if (isRegistered) { %>\n                          <button class=\"btn btn-success\" disabled>\n                            <i class=\"fas fa-check me-2\"></i>Already Registered\n                          </button>\n                        <% } else { %>\n                          <button class=\"btn btn-danger register-course-btn\" data-course-id=\"<%= course._id %>\">\n                            <i class=\"fas fa-clipboard-check me-2\"></i>Register as Trainer\n                          </button>\n                        <% } %>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              <% }); %>\n            </div>\n          <% } else { %>\n            <div class=\"alert alert-warning\">\n              <i class=\"fas fa-exclamation-circle me-2\"></i>No courses available for registration at this time.\n            </div>\n          <% } %>\n          \n          <!-- My Registered Courses Section -->\n          <div class=\"mt-5\">\n            <h3 class=\"mb-4 border-bottom pb-2\"><i class=\"fas fa-clipboard-list me-2\"></i>My Registered Courses</h3>\n            \n            <% if (trainer && trainer.trainerCourses && trainer.trainerCourses.length > 0) { \n              const activeCourses = trainer.trainerCourses.filter(reg => reg.status === 'active' && reg.course);\n              if (activeCourses.length > 0) { \n            %>\n              <div class=\"list-group\">\n                <% activeCourses.forEach(registration => { %>\n                  <div class=\"list-group-item list-group-item-action bg-dark text-white\">\n                    <div class=\"d-flex w-100 justify-content-between align-items-center\">\n                      <h5 class=\"mb-1\"><%= registration.course.name.charAt(0).toUpperCase() + registration.course.name.slice(1) %></h5>\n                      <small>Registered on <%= new Date(registration.registeredAt).toLocaleDateString() %></small>\n                    </div>\n                    <p class=\"mb-1\"><%= registration.course.description %></p>\n                    \n                    <!-- Display schedule for this course -->\n                    <div class=\"small mt-2\">\n                      <strong>Weekly Schedule:</strong>\n                      <% if (registration.course.schedule && registration.course.schedule.length > 0) { %>\n                        <% registration.course.schedule.forEach((session, idx) => { %>\n                          <%= session.day.charAt(0).toUpperCase() + session.day.slice(1) %>: <%= session.startTime %> - <%= session.endTime %>\n                          <%= idx < registration.course.schedule.length - 1 ? ' | ' : '' %>\n                        <% }); %>\n                      <% } else { %>\n                        No schedule available\n                      <% } %>\n                    </div>\n                  </div>\n                <% }); %>\n              </div>\n            <% } else { %>\n              <p class=\"text-muted\">You are not currently registered to teach any courses.</p>\n            <% } } else { %>\n              <p class=\"text-muted\">You are not currently registered to teach any courses.</p>\n            <% } %>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>";
const inlineScripts = ["// Handle trainer registration\ndocument.querySelectorAll('.register-course-btn').forEach(button => {\n  button.addEventListener('click', function(e) {\n    const courseId = this.getAttribute('data-course-id');\n    \n    if (!courseId) {\n      alert('Invalid course selected.');\n      return;\n    }\n    \n    if (!confirm('Are you sure you want to register to teach this course? You will be responsible for following the fixed weekly schedule.')) {\n      return;\n    }\n\n    // Disable button to prevent multiple clicks\n    this.disabled = true;\n    this.innerHTML = '<i class=\"fas fa-spinner fa-spin me-2\"></i>Processing...';\n    \n    // Submit registration request\n    fetch(`/courses/api/courses/${courseId}/register-trainer`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      },\n      credentials: 'same-origin',\n      body: JSON.stringify({ courseId })\n    })\n    .then(response => {\n      // Check if the response is JSON\n      const contentType = response.headers.get(\"content-type\");\n      if (contentType && contentType.indexOf(\"application/json\") !== -1) {\n        return response.json().then(data => ({ status: response.status, data }));\n      } else {\n        return response.text().then(text => ({ status: response.status, text }));\n      }\n    })\n    .then(result => {\n      console.log('Registration response:', result);\n      \n      if (result.status === 200 && result.data && result.data.success) {\n        alert('Successfully registered to teach this course!');\n        window.location.reload();\n      } else {\n        // Re-enable button\n        this.disabled = false;\n        this.innerHTML = '<i class=\"fas fa-clipboard-check me-2\"></i>Register as Trainer';\n        \n        // Show error message\n        if (result.data && result.data.message) {\n          alert(result.data.message);\n        } else if (result.text) {\n          alert(`Failed to register: ${result.text}`);\n        } else {\n          alert('Failed to register. Please try again.');\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error:', error);\n      \n      // Re-enable button\n      this.disabled = false;\n      this.innerHTML = '<i class=\"fas fa-clipboard-check me-2\"></i>Register as Trainer';\n      \n      alert('An error occurred. Please try again later.');\n    });\n  });\n});"];
const externalScripts = [];

function TrainerRegistration(props) {
  const defaults = (fallbackData && fallbackData["trainer-registration"]) || {};
  const data = { ...defaults, ...props };

  const defaultLocals = defaults.locals || {};
  const overrideLocals = props && props.locals ? props.locals : {};
  const locals = {
    ...defaultLocals,
    ...overrideLocals,
    isLoggedIn: data.isLoggedIn ?? defaultLocals.isLoggedIn ?? false,
    userRole: data.userRole ?? defaultLocals.userRole ?? "guest",
    userName: data.userName ?? defaultLocals.userName ?? "Guest",
  };

  data.locals = locals;

  let html = ejs.render(template, data);

  const collectedInlineScripts = [...inlineScripts];
  html = html.replace(/<script[^>]*>([\s\S]*?)<\/script>/gi, (_, body) => {
    const trimmed = body.trim();
    if (trimmed.length) {
      collectedInlineScripts.push(trimmed);
    }
    return "";
  });

  return (
    <MainLayout {...data} scripts={externalScripts}>
      <div dangerouslySetInnerHTML={{ __html: html }} />
      {collectedInlineScripts.map((script, index) => (
        <script key={index} dangerouslySetInnerHTML={{ __html: script }} />
      ))}
    </MainLayout>
  );
}

module.exports = TrainerRegistration;




